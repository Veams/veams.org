/* ===================================================
UTILITY: GRID
=================================================== */

/* ---------------------------------------------------
Global Variables
--------------------------------------------------- */
$grid-defaults: (
	columns: 12,
	gutter: 52px
) !default;
$grid-breakpoints-defaults: (
	'mobile-s': (
		columns: 12,
		gutter: 20px,
		media: 320px
	),
	'mobile-l': (
		columns: 12,
		gutter: 20px,
		media: 657px
	),
	'tablet-s': (
		columns: 12,
		gutter: 20px,
		media: 768px
	),
	'desktop-l': (
		columns: 12,
		gutter: 20px,
		media: 1024px
	),
	'desktop': (
		columns: 12,
		gutter: 20px,
		media: 1440px
	)
) !default;
$grid-class-col: 'is-col' !default;
$grid-offset: 'offset' !default;
$neat-grid: $grid-defaults;
$grid-breakpoints: $grid-breakpoints-defaults;

/* ---------------------------------------------------
Mixin
--------------------------------------------------- */

/**
 * Generate a set of grid column classes using a namespace
 *
 * .#{ $grid-class-col }-[namespace]-[number] for a column that covers a specific number of columns (e.g. 1-12 by default)
 * .#{ $grid-class-col }-[namespace]-{ $grid-offset }-[number] for pushing a col a specific number of columns (e.g. 1-11 by default)
 */
@mixin grid-sizes( $bp-map, $key ) {
	// Run the loop for as many columns as specified
	@for $i from 1 through map-get($bp-map, columns) {
		.#{$grid-class-col}-#{$key}-#{$i} {
			@include grid-column($i);
		}
	}

	// Offset classes
	@for $i from 0 through map-get($bp-map, columns) {
		// Don't include the .off class for the last column
		@if ($i != map-get($bp-map, columns)) {
			.#{$grid-class-col}-#{$key}-#{$grid-offset}-#{$i} {
				@include grid-push($i);
			}
		}
	}
}

/* ---------------------------------------------------
Grid Row
--------------------------------------------------- */
.is-grid-row,
.u-grid-row {
	@include grid-container();
	@include clearfix();

	/*
	Modifiers
	----------------------- */
	&.is-collapsed {
		@each $key in map-keys($grid-breakpoints) {
			$bp-map: map-get($grid-breakpoints, $key);

			@include grid-media($bp-map) {
				$gutter: map-get($bp-map, gutter);

				margin-left: -($gutter);
				margin-right: -($gutter);
				width: calc(100% + #{($gutter * 2)});
			}
		}
	}

	&.is-equal-height {
		display: flex;
		flex-wrap: wrap;
	}

	&.is-overflow-hidden {
		overflow: hidden;
	}
}

/* ---------------------------------------------------
Grid Col
--------------------------------------------------- */
.is-grid-col,
.u-grid-col {
	@include grid-column(12);

	position: relative;

	/*
	Modifiers
	----------------------- */
	&.is-equal-height {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
	}
}

/**
 * Build the grid for each namespace, wrap the col width/offset measurements in their breakpoint media query
 */
@each $key in map-keys($grid-breakpoints) {
	$bp-map: map-get($grid-breakpoints, $key);

	@include grid-media($bp-map) {
		@include grid-sizes($bp-map, $key);
		$bp-map: map-get($grid-breakpoints, $key);
		$gutter: map-get($bp-map, gutter);

	}
}
